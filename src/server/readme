# spaceTrash sever

A websocket and html server. It uses mongo as a persistence layer underneath redux, which is where all the game logic occurs. Here, redux is acting as an in-memory database.

## threading
While node does mot have "threads", it's useful to think of the server's archetcture in terms of 3 seperate processes

1. The main thread listens for websocket messages (drone commands sent from the client) and enqueues these instructions, as well as serving html.
2. Each clock "tick" takes the oldest instruction in every queue of every drone, (and every session!) executes that instruction with collision detection etc and writes that change to the redux store.
3. Redux subscribers watch the redux store for changes, broadcasting those changes to the clients via websockets.

## redux store

A singular in-memory redux store runs on the node server. It stores the game state for every session which means if the server crashes, this data is lost and it needs to be re-initialized from the mongo documents. It needs to store the current state of the "board".

It's structure:

sessionId: {
  "chatrooms": {}
}

## websockets

### rooms

- session-SESSION_ID: gives a feed of every change to a session (sudo)
- session-SESSION_ID-user-USER_ID: a user's feed  (rarely used)
- session-SESSION_ID-drone-DRONE_ID: a drone's feed (send instructions, receive observations)

- session-SESSION_ID-chat: a sessions chat room
- session-SESSION_ID-chat-[USER_AND_DRONE_IDs]: a chat room between any players and drones.


### messages
#### client -> server
- ENQUEUE_INSTRUCTION {droneId, instruction}

#### server -> client
- RAY {droneId,[OBSERVATION {rayType, [OBSERVATIONS] }]}

## instructions
- websocket: ENQUEUE_INSTRUCTION
- "cpu":
  - UPGRADE_ID- INSTRUCTION

## upgrades
### chasis
- tankV0: FORWARD, LEFT, RIGHT, BACK

### scanners
- videoV0: SCAN
