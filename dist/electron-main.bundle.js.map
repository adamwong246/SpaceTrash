{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/electron-is-dev/index.js","webpack:///./src/electron-main/main.js","webpack:///external \"child_process\"","webpack:///external \"electron\"","webpack:///external \"path\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AAC8B;AACnB;AACnC;AACoC;;AAEpC;AACA;AACA;;AAEA;;AAEA,kBAAkB,sDAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAI;AACnB,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA,4CAAG;AACH,oCAAoC;;AAEpC;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,CAAC;;AAED,4CAAG;AACH;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACnGD,0C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,iC","file":"electron-main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/electron-main/main.js\");\n","'use strict';\nconst electron = require('electron');\n\nif (typeof electron === 'string') {\n\tthrow new TypeError('Not running in an Electron environment!');\n}\n\nconst app = electron.app || electron.remote.app;\n\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst getFromEnv = parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\n\nmodule.exports = isEnvSet ? getFromEnv : !app.isPackaged;\n","import path from 'path';\nimport electron, {app, BrowserWindow} from 'electron';\nimport {fork} from 'child_process';\n// import findOpenSocket from './find-open-socket';\nimport isDev from 'electron-is-dev';\n\nlet clientWin\nlet serverWin\nlet serverProcess\n\nfunction createWindow(socketName) {\n\n  clientWin = new BrowserWindow({\n    width: 1000,\n    height: 700,\n    webPreferences: {\n      nodeIntegration: true,\n      // preload: \"./preload.js\"\n      // preload: path.resolve('./dist', 'preload.js'),\n      // preload: \"preload.jsasdasd\"\n      preload: path.resolve('dist', 'preload.js'),\n    },\n    title: \"SpaceTrash v0.0.8\"\n  })\n\n  // clientWin.loadFile('client-index.html')\n  clientWin.loadFile('index.html')\n\n  clientWin.webContents.on('did-finish-load', () => {\n    clientWin.webContents.send('set-socket', {\n      name: socketName\n    })\n  })\n}\n\n// function createBackgroundWindow(socketName) {\n//   const win = new BrowserWindow({\n//     x: 500,\n//     y: 300,\n//     width: 700,\n//     height: 500,\n//     show: true,\n//     webPreferences: {\n//       nodeIntegration: true\n//     }\n//   })\n//\n//   // const p = path.resolve('dist', 'server-devz.html')\n//   // console.log(p)\n//   // // win.loadURL(`file://${__dirname}server-dev.html`)\n//   // // win.loadURL(path.resolve('dist', 'server-dev.html'))\n//   // // win.loadURL('server-dev.html')\n//   // win.loadURL(p)\n//   win.loadFile('server-dev.html')\n//\n//   win.webContents.on('did-finish-load', () => {\n//     win.webContents.send('set-socket', { name: socketName })\n//   })\n//\n//   serverWin = win\n// }\n\n// function createBackgroundProcess(socketName) {\n//   console.log('createBackgroundProcess')\n//   const bundlePath = 'dist/electron-main.bundle.js';\n//   console.log(bundlePath);\n//   console.log(socketName);\n//   const args = [\n//     '--subprocess',\n//     app.getVersion(),\n//     socketName\n//   ];\n//   console.log(args)\n//   serverProcess = fork(bundlePath, args);\n//\n//   serverProcess.on('message', msg => {\n//     console.log('message: ', msg)\n//   })\n// }\n\napp.on('ready', async () => {\n  const serverSocket = \"spacetrash\"; //await findOpenSocket()\n\n  createWindow(serverSocket)\n\n  console.log(\"listening on \", serverSocket)\n  // createBackgroundProcess(serverSocket)\n  // if (isDev) {\n  //   createBackgroundWindow(serverSocket)\n  // } else {\n  //   createBackgroundProcess(serverSocket)\n  // }\n})\n\napp.on('before-quit', () => {\n  if (serverProcess) {\n    serverProcess.kill()\n    serverProcess = null\n  }\n})\n","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"path\");"],"sourceRoot":""}